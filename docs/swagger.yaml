basePath: /api
definitions:
  models.ApprovalRequestDTO:
    properties:
      request_id:
        example: 1
        type: integer
      review_notes:
        example: Documentação em ordem
        type: string
      status:
        enum:
        - approved
        - rejected
        example: approved
        type: string
    required:
    - request_id
    - status
    type: object
  models.AuthResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.Company:
    properties:
      address:
        type: string
      cae:
        type: string
      city:
        type: string
      company_name:
        type: string
      country:
        type: string
      created_at:
        type: string
      id:
        type: integer
      legal_form:
        type: string
      nipc:
        type: string
      postal_code:
        type: string
      registration_date:
        type: string
      share_capital:
        type: number
      status:
        type: string
      trade_name:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.LoginRequest:
    properties:
      password:
        example: "123456"
        minLength: 6
        type: string
      username:
        example: joao.silva
        type: string
    required:
    - password
    - username
    type: object
  models.RegisterRequest:
    properties:
      email:
        example: joao@exemplo.com
        type: string
      name:
        example: João Silva
        minLength: 2
        type: string
      nif:
        example: "123456789"
        type: string
      password:
        example: "123456"
        minLength: 6
        type: string
      phone:
        example: "912345678"
        type: string
      role:
        enum:
        - client
        - accountant
        - admin
        example: client
        type: string
      status:
        enum:
        - pending
        - approved
        - rejected
        - blocked
        example: pending
        type: string
      username:
        example: joao.silva
        type: string
    required:
    - email
    - name
    - nif
    - password
    - phone
    - role
    - status
    - username
    type: object
  models.RegistrationRequest:
    properties:
      approval_token:
        type: string
      created_at:
        type: string
      id:
        type: integer
      request_data:
        type: string
      request_type:
        description: new_client, existing_client
        type: string
      review_notes:
        type: string
      reviewed_at:
        type: string
      reviewed_by:
        type: integer
      reviewed_by_user:
        $ref: '#/definitions/models.User'
      status:
        type: string
      submitted_at:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.RegistrationRequestDTO:
    properties:
      address:
        example: Rua das Flores, 123
        type: string
      cae:
        example: "69200"
        type: string
      city:
        example: Lisboa
        type: string
      company_name:
        description: Dados da Empresa
        example: Silva & Associados Lda
        type: string
      country:
        example: Portugal
        type: string
      email:
        example: joao@exemplo.com
        type: string
      legal_form:
        example: Sociedade por Quotas
        type: string
      name:
        example: João Silva
        type: string
      nif:
        example: "123456789"
        type: string
      nipc:
        example: "123456789"
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      phone:
        example: "912345678"
        type: string
      postal_code:
        example: 1000-001
        type: string
      registration_date:
        example: "2024-01-15"
        type: string
      share_capital:
        example: 5000
        type: number
      trade_name:
        example: Silva Consultoria
        type: string
      username:
        description: Dados Pessoais
        example: joao.silva
        type: string
    required:
    - address
    - city
    - company_name
    - email
    - name
    - nif
    - nipc
    - password
    - phone
    - postal_code
    - username
    type: object
  models.SuccessResponse:
    properties:
      data: {}
      message:
        example: Operação realizada com sucesso
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.UpdateCompanyDTO:
    properties:
      address:
        example: Rua das Flores, 123
        type: string
      city:
        example: Lisboa
        type: string
      postal_code:
        example: 1000-001
        type: string
      trade_name:
        example: Silva Consultoria
        type: string
    type: object
  models.UpdateProfileDTO:
    properties:
      name:
        example: João Silva
        type: string
      phone:
        example: "912345678"
        type: string
    type: object
  models.UpdateUserStatusDTO:
    properties:
      notes:
        example: Motivo da alteração
        type: string
      status:
        enum:
        - approved
        - rejected
        - blocked
        example: approved
        type: string
    required:
    - status
    type: object
  models.User:
    properties:
      companies:
        description: Relacionamentos
        items:
          $ref: '#/definitions/models.Company'
        type: array
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: joao@exemplo.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: João Silva
        type: string
      nif:
        description: Chave única para detetar duplicados
        example: "123456789"
        type: string
      phone:
        example: "912345678"
        type: string
      requests:
        items:
          $ref: '#/definitions/models.RegistrationRequest'
        type: array
      role:
        description: client, accountant, admin
        example: client
        type: string
      status:
        description: pending, approved, rejected, blocked
        example: pending
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      username:
        example: joao.silva
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Sistema de gestão contabilística com aprovação de clientes
  title: RV Contabilidade API
  version: "1.0"
paths:
  /admin/approve-request:
    post:
      consumes:
      - application/json
      description: Aprova ou rejeita uma solicitação de registo (apenas contabilistas/admin)
      parameters:
      - description: Dados de aprovação
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ApprovalRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Aprovar/rejeitar solicitação
      tags:
      - admin
  /admin/pending-requests:
    get:
      consumes:
      - application/json
      description: Lista todas as solicitações de registo pendentes (apenas contabilistas/admin)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Listar solicitações pendentes
      tags:
      - admin
  /admin/requests:
    get:
      consumes:
      - application/json
      description: Lista todas as solicitações (apenas contabilistas/admin)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Histórico de solicitações
      tags:
      - admin
  /admin/requests/{id}:
    get:
      consumes:
      - application/json
      description: Obtém detalhes completos de uma solicitação específica
      parameters:
      - description: ID da solicitação
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Detalhes de uma solicitação
      tags:
      - admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: Lista todos os utilizadores do sistema (apenas admin/contabilista)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Listar todos os utilizadores
      tags:
      - admin
  /admin/users/{id}:
    get:
      consumes:
      - application/json
      description: Obtém detalhes completos de um utilizador
      parameters:
      - description: ID do utilizador
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Detalhes de um utilizador
      tags:
      - admin
  /admin/users/{id}/status:
    put:
      consumes:
      - application/json
      description: Bloqueia/desbloqueia utilizador (apenas admin)
      parameters:
      - description: ID do utilizador
        in: path
        name: id
        required: true
        type: integer
      - description: Novo status
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserStatusDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Alterar status de utilizador
      tags:
      - admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login com username e password
      parameters:
      - description: Username e password
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthResponse'
      summary: Entrar
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Remove token do lado do cliente
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Logout do utilizador
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Cria uma nova solicitação de registo para aprovação da contabilista
      parameters:
      - description: Dados de registo completos
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegistrationRequestDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuccessResponse'
      summary: Registo de novo cliente
      tags:
      - auth
  /auth/register-direct:
    post:
      consumes:
      - application/json
      description: Regista novo utilizador diretamente (para uso interno)
      parameters:
      - description: Dados de registo
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AuthResponse'
      summary: Criar conta diretamente
      tags:
      - auth
  /client/company:
    get:
      consumes:
      - application/json
      description: Obtém dados da empresa do cliente logado
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Dados da empresa do cliente
      tags:
      - client
    put:
      consumes:
      - application/json
      description: Atualiza dados da empresa do cliente (campos limitados)
      parameters:
      - description: Dados a atualizar
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCompanyDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Atualizar dados da empresa
      tags:
      - client
  /client/profile:
    get:
      consumes:
      - application/json
      description: Obtém perfil do cliente logado
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Perfil do cliente
      tags:
      - client
    put:
      consumes:
      - application/json
      description: Atualiza dados pessoais do cliente
      parameters:
      - description: Dados a atualizar
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProfileDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Atualizar perfil do cliente
      tags:
      - client
  /client/requests:
    get:
      consumes:
      - application/json
      description: Lista todas as solicitações do cliente logado
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Histórico de solicitações do cliente
      tags:
      - client
  /info:
    get:
      consumes:
      - application/json
      description: Como usar a API e autenticação
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Informações da API
      tags:
      - info
  /profile:
    get:
      consumes:
      - application/json
      description: Obtém dados do utilizador logado (requer token no header Authorization)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
      security:
      - BearerAuth: []
      summary: Meu perfil
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
